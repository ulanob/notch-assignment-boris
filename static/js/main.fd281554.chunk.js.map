{"version":3,"sources":["stories/Header.jsx","stories/Form.jsx","stories/Table.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","backgroundColor","href","src","alt","Form","props","className","action","onChange","e","handleChange","filterVendors","target","value","htmlFor","name","id","entries","map","entry","vendorName","onClick","reset","Table","displayData","vendor","i","background","orderBuyerStatus","deliveryDay","isBYOS","isPendingVendorOnboarding","total","App","useState","apiData","setApiData","loading","setLoading","vendorChoice","setVendorChoice","setDisplayData","useEffect","axios","post","then","res","data","el","toFixed","formatDate","trim","date","Date","getMonth","getDate","getFullYear","val","filtered","filter","preventDefault","element","document","getElementById","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fd281554.chunk.js","sourcesContent":["import React from 'react';\n\nimport './sass/styles.scss';\n\nexport const Header = ({ backgroundColor, ...props }) => {\n  return (\n    <header>\n      <a href=\"https://www.notchordering.com/\">\n        <img src=\"https://storage.googleapis.com/chefhero-storage-release/interview/logo.svg\" alt=\"Notch logo\" />\n      </a>\n    </header >\n  )\n}","import React from 'react';\r\n\r\nimport './sass/styles.scss';\r\n\r\nexport const Form = ({ ...props }) => {\r\n  return (\r\n    <div className=\"formContainer\">\r\n      <div className=\"wrapper \">\r\n        <form action=\"select\" onChange={(e) => {\r\n          props.handleChange(e);\r\n          props.filterVendors(e.target.value)\r\n        }}>\r\n          <label htmlFor=\"formVendorList\">Supplier</label>\r\n          <select className=\"wrapper\" name=\"formVendorList\" id=\"formVendorList\">\r\n            <option value=\"all\">All Suppliers</option>\r\n            {\r\n              props.entries.map((entry) => {\r\n                return (\r\n                  <option key={entry.id}>{entry.vendorName}</option>\r\n                )\r\n              })\r\n            }\r\n          </select>\r\n          <button onClick={(e) => props.reset(e)}>Reset Filters</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './sass/styles.scss';\r\n\r\nexport const Table = ({ ...props }) => {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th className='col1'>STATUS</th>\r\n            <th className='col2'>DELIVERY DAY</th>\r\n            <th className='col3'>SUPPLIER</th>\r\n            <th className='col4'>TOTAL</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            props.displayData.map((vendor, i) => {\r\n              return (\r\n                <tr key={i}>\r\n                  <td className='col1'>\r\n                    <span className={vendor.background}>{vendor.orderBuyerStatus}</span>\r\n                  </td>\r\n                  <td className='col2'>\r\n                    {vendor.deliveryDay ? vendor.deliveryDay : null}\r\n                  </td>\r\n                  <td className='col3'>\r\n                    {vendor.vendorName}\r\n                    {!vendor.isBYOS ? <span className='market'>Market</span> : null}\r\n                    {vendor.isPendingVendorOnboarding ? <span className='first'>1st</span> : null}\r\n                  </td>\r\n                  <td className='col4'>\r\n                    {vendor.total === 0 || !vendor.total ? null : vendor.total}\r\n                  </td>\r\n                </tr>\r\n              )\r\n            })\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\";\nimport axios from 'axios';\n\nimport { Header } from \"./stories/Header\";\nimport { Form } from './stories/Form';\nimport { Table } from './stories/Table'\n\nfunction App() {\n  const [apiData, setApiData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [vendorChoice, setVendorChoice] = useState('');\n  const [displayData, setDisplayData] = useState([]);\n\n  // API Call\n  useEffect(() => {\n    const apiUrl = \"http://api.interview.staging.foodieorders.com/v3/orders/search\";\n    axios.post(apiUrl, {}).then((res) => {\n      // formatting \n      res.data.data.map((el) => {\n        // total: num -> str\n        if (el.total === 0) {\n          el.total = null;\n        } else {\n          el.total = '$' + el.total.toFixed(2);\n        }\n\n        // date: YYYY-MM-DD -> Mth. DD, YYYY\n        if (el.deliveryDay === '') {\n          el.deliveryDay = null;\n        } else {\n          el.deliveryDay = formatDate(el);\n        }\n\n        // adding classNames to element obj for background color\n        if (el.orderBuyerStatus === 'Paid') {\n          el.background = 'paid';\n        } else if (el.orderBuyerStatus === 'Delivered') {\n          el.background = 'delivered'\n        } else if (el.orderBuyerStatus === 'In Shopping Cart') {\n          el.background = 'cart'\n        }\n\n        // formatting vendor names (Whole River and Palette didn't render)\n        el.vendorName = el.vendorName.trim();\n      });\n\n      setApiData(res.data.data);\n      setDisplayData(res.data.data);\n      setLoading(false);\n    })\n  }, []);\n\n  // takes value of form select on change, stores to vendorChoice state\n  const handleChange = (e) => {\n    setVendorChoice(e.target.value);\n  }\n\n  // handles displayData state to be used by Table component\n  const filterVendors = (val) => {\n    if (val === \"all\") {\n      setDisplayData(apiData)\n    } else {\n      const filtered = apiData.filter((entry) => {\n        return val === entry.vendorName;\n      })\n      setDisplayData(filtered);\n    }\n  }\n\n  const reset = (e) => {\n    e.preventDefault();\n    const element = document.getElementById('formVendorList');\n    element.value = 'all';\n    setVendorChoice(element.value);\n    setDisplayData(apiData);\n  }\n\n  const formatDate = (el) => {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    let date = new Date(el.deliveryDay)\n    const formattedStr = months[date.getMonth()] + '. ' + date.getDate() + ', ' + date.getFullYear();\n    return formattedStr;\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Form entries={apiData} handleChange={handleChange} filterVendors={filterVendors} reset={reset} />\n      {\n        loading ?\n          <p>Loading...</p> :\n          <Table displayData={displayData} vendorChoice={vendorChoice} />\n      }\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}